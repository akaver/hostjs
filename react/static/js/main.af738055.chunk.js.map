{"version":3,"sources":["types/EPageStatus.ts","components/Footer.tsx","context/AppContext.ts","components/Header.tsx","containers/contact-types/ContactTypeCreate.tsx","containers/contact-types/ContactTypeDelete.tsx","containers/contact-types/ContactTypeDetails.tsx","containers/contact-types/ContactTypeEdit.tsx","components/Loader.tsx","configuration.ts","services/base-service.ts","containers/contact-types/ContactTypeIndex.tsx","components/Alert.tsx","containers/home/HomeIndex.tsx","services/identity-service.ts","containers/identity/Login.tsx","containers/Page404.tsx","containers/PageForm.tsx","App.tsx","index.tsx"],"names":["EPageStatus","Footer","className","initialAppState","jwt","firstName","lastName","setAuthInfo","AppContext","React","createContext","AppContextProvider","Provider","Header","Consumer","appState","useContext","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onClick","ContactTypeCreate","ContactTypeDelete","id","useParams","ContactTypeDetails","ContactTypeEdit","Loader","props","pageStatus","Loading","role","Error","statusCode","ApiBaseUrl","BaseService","headers","Authorization","apiEndpoint","this","axios","get","getAxiosConfiguration","response","ok","status","data","error","messages","Axios","create","baseURL","EAlertClass","RowDisplay","contactType","contactTypeValue","contactCount","ContactTypeIndex","useState","contactTypes","setContactTypes","setPageStatus","loadData","a","getAll","result","OK","useEffect","map","HomeIndex","Alert","show","alertClass","message","IdentityService","loginData","loginDataJson","JSON","stringify","post","Login","email","password","setLoginData","alertMessage","setAlertMessage","logInClicked","e","preventDefault","firstname","lastname","onSubmit","nativeEvent","Danger","htmlFor","value","onChange","target","name","placeholder","autoComplete","Page404","FormView","values","input","handleChange","checked","checkbox","radio","textarea","rows","select","initialFormValues","PageForm","formValues","setFormValues","console","log","App","setAppState","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af738055.chunk.js","sourcesContent":["export enum EPageStatus {\n    Loading = \"Loading...\",\n    Error = \"Error...\",\n    OK = \"Ok\",\n}\n","const Footer = () => {\n    return (\n        <footer className=\"border-top footer text-muted\">\n            <div className=\"container\">\n                &copy; 2021 - React Demo\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;","import React from \"react\";\n\nexport interface IAppState {\n    jwt: string | null;\n    firstName: string;\n    lastName: string;\n    setAuthInfo: (jwt: string | null, firstName: string, lastName: string) => void;\n}\n\nexport const initialAppState : IAppState = {\n    jwt: null,\n    firstName: '',\n    lastName: '',\n    setAuthInfo: (jwt: string | null, firstName: string, lastName: string): void => {}\n}\n\nexport const AppContext = React.createContext<IAppState>(initialAppState);\nexport const AppContextProvider = AppContext.Provider;\nexport const AppContextConsumer = AppContext.Consumer;\n","import React, { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { AppContext } from \"../context/AppContext\";\n\nconst Header = () => {\n    const appState = useContext(AppContext);\n\n    return (\n        <header>\n            <nav className=\"navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3\">\n                <div className=\"container\">\n                    <NavLink className=\"navbar-brand\" to=\"/\">React Demo</NavLink>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\".navbar-collapse\" aria-controls=\"navbarSupportedContent\"\n                        aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"navbar-collapse collapse d-sm-inline-flex justify-content-between\">\n                        <ul className=\"navbar-nav flex-grow-1\">\n\n                            <li className=\"nav-item\">\n                                <NavLink className=\"nav-link text-dark\" to=\"/ContactTypes\">ContactTypes</NavLink>\n                            </li>\n                            <li className=\"nav-item\">\n                                <NavLink className=\"nav-link text-dark\" to=\"/form\">Form Demo</NavLink>\n                            </li>\n\n                            {/* <li className=\"nav-item dropdown\">\n                                <a className=\"nav-link dropdown-toggle text-dark\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Languages</a>\n                                <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                                    <a className=\"dropdown-item text-dark\" href=\"/Home/SetLanguage?culture=et&amp;returnUrl=%2F\">eesti</a>\n                                    <a className=\"dropdown-item text-dark\" href=\"/Home/SetLanguage?culture=en-GB&amp;returnUrl=%2F\">English (United Kingdom)</a>\n                                </div>\n                            </li> */}\n\n                        </ul>\n                        <ul className=\"navbar-nav\">\n                            {appState.jwt === null ?\n                                <li className=\"nav-item\">\n                                    <NavLink className=\"nav-link text-dark\" to=\"/identity/login\">Login</NavLink>\n                                </li>\n\n                                :\n                                <>\n                                    <li className=\"nav-item\">\n                                        <span className=\"nav-link text-dark\">{appState.firstName + ' ' + appState.lastName}</span>\n                                    </li>\n                                    <li className=\"nav-item\">\n                                        <button onClick={() => appState.setAuthInfo(null, '','')} className=\"btn btn-link nav-link text-dark\" >Logout</button>\n                                    </li>\n                                </>\n                            }\n\n                        </ul>\n\n                    </div>\n                </div>\n            </nav>\n        </header>\n    );\n}\n\nexport default Header;","const ContactTypeCreate = () => {\n    return (\n        <div>ContactTypeCreate</div>\n    );\n}\n\nexport default ContactTypeCreate;","import { useParams } from \"react-router-dom\";\nimport { IRouteId } from \"../../types/IRouteId\";\n\nconst ContactTypeDelete = () => {\n    const {id} = useParams() as IRouteId; \n    \n    return (\n        <div>ContactTypeDelete {id}</div>\n    );\n}\n\nexport default ContactTypeDelete;","import { useParams } from \"react-router-dom\";\nimport { IRouteId } from \"../../types/IRouteId\";\n\nconst ContactTypeDetails = () => {\n    // get the router params from hook\n    const {id} = useParams() as IRouteId; \n\n    return (\n        <div>ContactTypeDetails Id: {id}</div>\n    );\n}\n\nexport default ContactTypeDetails;","import { useParams } from \"react-router-dom\";\nimport { IRouteId } from \"../../types/IRouteId\";\n\nconst ContactTypeEdit = () => {\n    const {id} = useParams() as IRouteId; \n    return (\n        <div>ContactTypeEdit {id}</div>\n    );\n}\n\nexport default ContactTypeEdit;","import { EPageStatus } from \"../types/EPageStatus\";\n\nconst Loader = (props: {pageStatus:EPageStatus, statusCode:  number}) => {\n    if (props.pageStatus === EPageStatus.Loading){\n        return <div className=\"alert alert-primary\" role=\"alert\">Loading...</div>;\n    }\n    if (props.pageStatus === EPageStatus.Error) {\n        return <div className=\"alert alert-danger\" role=\"alert\">Error... {props.statusCode}</div>\n    }\n    return <></>;\n}\n\nexport default Loader;","export const ApiBaseUrl = \"https://distributed2020-2021.azurewebsites.net/api/v1\";\n","import Axios, { AxiosError, AxiosRequestConfig } from 'axios';\nimport { ApiBaseUrl } from '../configuration';\nimport { IFetchResponse } from '../types/IFetchResponse';\nimport { IMessages } from '../types/IMessages';\n\nexport abstract class BaseService {\n    protected static axios = Axios.create({\n        baseURL: ApiBaseUrl,\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    protected static getAxiosConfiguration(jwt?: string): AxiosRequestConfig | undefined {\n        if (!jwt) return undefined;\n        const config: AxiosRequestConfig = {\n            headers: {\n                Authorization: 'Bearer ' + jwt\n            }\n        };  \n        return config;      \n    }\n\n    static async getAll<TEntity>(apiEndpoint: string, jwt?: string): Promise<IFetchResponse<TEntity[]>> {\n        try {\n            let response = await this.axios.get<TEntity[]>(apiEndpoint, BaseService.getAxiosConfiguration(jwt));\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };    \n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages,\n            }\n        }\n\n    }\n\n}","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"../../components/Loader\";\nimport { IContactType } from \"../../dto/IContactType\";\nimport { BaseService } from \"../../services/base-service\";\nimport { EPageStatus } from \"../../types/EPageStatus\";\n\nconst RowDisplay = (props: { contactType: IContactType }) => (\n    <tr>\n        <td>\n            {props.contactType.contactTypeValue}\n        </td>\n        <td>\n            {props.contactType.contactCount}\n        </td>\n        <td>\n            <Link to={'/ContactTypes/' + props.contactType.id}>Details</Link>\n        </td>\n    </tr>\n);\n\nconst ContactTypeIndex = () => {\n    const [contactTypes, setContactTypes] = useState([] as IContactType[]);\n\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\n\n    const loadData = async () => {\n        let result = await BaseService.getAll<IContactType>('/contacttypes');\n\n        if (result.ok && result.data) {\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n            setContactTypes(result.data);\n        } else {\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode });\n        }\n    }\n\n    useEffect(() => {\n        loadData();\n    }, []);\n\n    return (\n        <>\n            <h1>ContactTypes</h1>\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <th>\n                            ContactType\n                        </th>\n                        <th>\n                            Count\n                        </th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {contactTypes.map(contactType =>\n                        <RowDisplay contactType={contactType} key={contactType.id} />)\n                    }\n                </tbody>\n            </table>\n            <Loader {...pageStatus} />\n        </>\n    );\n}\n\nexport default ContactTypeIndex;","export enum EAlertClass {\n    Primary = 'alert-primary',\n    Secondary = 'alert-secondary',\n    Success = 'alert-success',\n    Danger = 'alert-danger',\n    Warning = 'alert-warning',\n    Info = 'alert-info',\n    Light = 'alert-light',\n    Dark = 'alert-dark',\n}\n\nconst Alert = (props: {show: boolean, message: string, alertClass: EAlertClass }) => {\n    \n    return props.show ? <div className={'alert ' + props.alertClass} role=\"alert\">{props.message}</div> : null;\n}\n\nexport default Alert;","const HomeIndex = () => {\n    return (\n        <div>HomeIndex</div>\n    );\n}\n\nexport default HomeIndex;","import { ILoginResponse } from './../types/ILoginResponse';\nimport Axios, { AxiosError } from 'axios';\nimport { ApiBaseUrl } from '../configuration';\nimport { IFetchResponse } from '../types/IFetchResponse';\nimport { IMessages } from '../types/IMessages';\n\nexport abstract class IdentityService {\n    protected static axios = Axios.create({\n        baseURL: ApiBaseUrl,\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    static async Login(apiEndpoint: string, loginData: {email: string, password:string}): Promise<IFetchResponse<ILoginResponse>> {\n        let loginDataJson = JSON.stringify(loginData);\n        try {\n            let response = await this.axios.post<ILoginResponse>(apiEndpoint, loginDataJson);\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };    \n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages,\n            }\n        }\n\n    }\n\n}","import React, { useContext, useState } from \"react\";\nimport { Redirect } from \"react-router\";\nimport Alert, { EAlertClass } from \"../../components/Alert\";\nimport { AppContext } from \"../../context/AppContext\";\nimport { IdentityService } from \"../../services/identity-service\";\n\nconst Login = () => {\n    const appState = useContext(AppContext);\n\n    const [loginData, setLoginData] = useState({ email: '', password: '' });\n    const [alertMessage, setAlertMessage] = useState('');\n\n    const logInClicked = async (e: Event) => {\n        e.preventDefault();\n        if (loginData.email === '' || loginData.password === '') {\n            setAlertMessage('Empty email or pawwsord!');\n        };\n        setAlertMessage('');\n        let response = await IdentityService.Login('account/login', loginData);\n        if (!response.ok) {\n            setAlertMessage(response.messages![0]);\n        } else {\n            setAlertMessage('');\n            appState.setAuthInfo(response.data!.jwt, response.data!.firstname, response.data!.lastname);\n        }\n    }\n\n    return (\n        <>\n            { appState.jwt !== null ? <Redirect to=\"/\" /> : null}\n            <h1>Log in</h1>\n            <form onSubmit={(e) => logInClicked(e.nativeEvent)}>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <section>\n                            <hr />\n                            <Alert show={alertMessage !== ''} message={alertMessage} alertClass={EAlertClass.Danger} />\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Email\">Email</label>\n                                <input value={loginData.email} onChange={e => setLoginData({ ...loginData, email: e.target.value })} className=\"form-control\" type=\"email\" id=\"Input_Email\" name=\"Input.Email\" placeholder=\"user@example.com\"  autoComplete=\"username\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Password\">Password</label>\n                                <input value={loginData.password} onChange={e => setLoginData({ ...loginData, password: e.target.value })} className=\"form-control\" type=\"password\" id=\"Input_Password\" name=\"Input.Password\" placeholder=\"Input your current password...\" autoComplete=\"current-password\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <button onClick={(e) => logInClicked(e.nativeEvent)} type=\"submit\" className=\"btn btn-primary\">Log in</button>\n                            </div>\n                        </section>\n                    </div>\n                </div>\n            </form>\n        </>\n    );\n}\n\nexport default Login;","const Page404 = () => {\n    return (\n        <div>Page not found - 404!</div>\n    );\n}\n\nexport default Page404;","import { useState } from \"react\";\n\ninterface IFormValues {\n    input: string;\n    checkbox: boolean;\n    radio: string;\n    textarea: string;\n    select: string;\n}\n\nexport interface IFormProps {\n    values: IFormValues;\n\n    handleChange: (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => void;\n}\n\nconst FormView = (props: IFormProps) => {\n    return (\n        <form>\n            <div className=\"form-group\">\n                <label htmlFor=\"formInputText\">Text</label>\n                <input value={props.values.input} onChange={(e) => props.handleChange(e.target)} type=\"text\" className=\"form-control\" id=\"formInputText\" />\n            </div>\n            <div className=\"form-group form-check\">\n                <input checked={props.values.checkbox} onChange={(e) => props.handleChange(e.target)} type=\"checkbox\" className=\"form-check-input\" id=\"formInputCheckBox\" />\n                <label className=\"form-check-label\" htmlFor=\"formInputCheckBox\">CheckBox</label>\n            </div>\n\n            <div className=\"form-check\">\n                <input checked={props.values.radio === 'checked1'} onChange={(e) => props.handleChange(e.target)} className=\"form-check-input\" type=\"radio\" id=\"formInputRadio1\" value=\"checked1\" />\n                <label className=\"form-check-label\" htmlFor=\"formInputRadio1\">\n                    Radio 1\n                </label>\n            </div>\n            <div className=\"form-check\">\n                <input checked={props.values.radio === 'checked2'} onChange={(e) => props.handleChange(e.target)} className=\"form-check-input\" type=\"radio\"id=\"formInputRadio2\" value=\"checked2\" />\n                <label className=\"form-check-label\" htmlFor=\"formInputRadio2\">\n                    Radio 2\n                </label>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"formTextArea\">Textarea</label>\n                <textarea value={props.values.textarea} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"formTextArea\" rows={3}></textarea>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"formSelect\">Example select</label>\n                <select value={props.values.select} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"formSelect\">\n                    <option>1</option>\n                    <option>2</option>\n                    <option>3</option>\n                </select>\n            </div>\n\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n        </form>\n    );\n}\nconst initialFormValues: IFormValues = {\n    input: '',\n    checkbox: false,\n    radio: '',\n    textarea: '',\n    select: '',\n};\n\n\n\nconst PageForm = () => {\n    const [formValues, setFormValues] = useState(initialFormValues);\n\n    const handleChange = (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {\n        // todo: update form value\n        console.log(target);\n\n        if (target.id === 'formInputText') {\n            setFormValues({ ...formValues, input: target.value });\n            return;\n        }\n        if (target.id === 'formInputCheckBox') {\n            setFormValues({ ...formValues, checkbox: (target as HTMLInputElement).checked });\n            return;\n        }\n        if (target.id === 'formInputRadio1') {\n            setFormValues({ ...formValues, radio: (target as HTMLInputElement).value });\n            return;\n        }\n        if (target.id === 'formInputRadio2') {\n            setFormValues({ ...formValues, radio: (target as HTMLInputElement).value });\n            return;\n        }\n        if (target.id === 'formTextArea') {\n            setFormValues({ ...formValues, textarea: target.value });\n            return;\n        }\n        if (target.id === 'formSelect') {\n            setFormValues({ ...formValues, select: target.value });\n            return;\n        }\n    }\n\n\n    return <FormView values={formValues} handleChange={handleChange} />\n};\n\nexport default PageForm;","import React, { useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport ContactTypeCreate from './containers/contact-types/ContactTypeCreate';\nimport ContactTypeDelete from './containers/contact-types/ContactTypeDelete';\nimport ContactTypeDetails from './containers/contact-types/ContactTypeDetails';\nimport ContactTypeEdit from './containers/contact-types/ContactTypeEdit';\nimport ContactTypeIndex from './containers/contact-types/ContactTypeIndex';\nimport HomeIndex from './containers/home/HomeIndex';\nimport Login from './containers/identity/Login';\nimport Page404 from './containers/Page404';\nimport PageForm from './containers/PageForm';\nimport { AppContextProvider, initialAppState } from './context/AppContext';\n\nfunction App() {\n    const setAuthInfo = (jwt: string | null, firstName: string, lastName: string): void => {\n        setAppState({...appState, jwt, firstName, lastName});\n    }\n\n    const [appState, setAppState] = useState({...initialAppState, setAuthInfo });\n\n    return (\n        <>\n            <AppContextProvider value={appState} >\n                <Header />\n                <div className=\"container\">\n                    <main role=\"main\" className=\"pb-3\">\n                        <Switch>\n                            <Route exact path=\"/\" component={HomeIndex} />\n\n                            <Route path=\"/form\" component={PageForm} />\n\n                            <Route path=\"/identity/login\" component={Login} />\n\n                            <Route path=\"/contacttypes/create\" component={ContactTypeCreate} />\n                            <Route path=\"/contacttypes/edit/:id\" component={ContactTypeEdit} />\n                            <Route path=\"/contacttypes/delete/:id\" component={ContactTypeDelete} />\n                            <Route path=\"/contacttypes/:id\" component={ContactTypeDetails} />\n                            <Route path=\"/contacttypes\" component={ContactTypeIndex} />\n\n                            <Route component={Page404} />\n                        </Switch>\n                    </main>\n                </div>\n                <Footer />\n            </AppContextProvider>\n        </>\n    );\n}\n\nexport default App;\n","import 'jquery';\nimport 'popper.js';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nimport './assets/site.css'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <Router>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}